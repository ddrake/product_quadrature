#include <iostream>
#include <vector>
#include <map>
using namespace std;

struct PointParam {
  double r;   // radius (Gauss-Legendre)
  double t;   // sin(theta) (Gauss-Chebyshev)
  double q;   // cos(theta) = sqrt(1-t^2)
  double A;   // Gauss-Legendre weight
};

struct DiskParam {
  double B;     // Chebyschev-Legendre weight
  vector<PointParam> pts;
};

map<int, DiskParam> disk_pars;

void init_disk_pars()
{
  disk_pars[1] =  { 3.141592653589793238462643,
    {{  0.000000000000000000000000,   0.0000000000000000000000000, 1.0000000000000000000000000, 1.0000000000000000000000000 } 
    }
  };
  disk_pars[2] =  { 1.5707963267948966192313217,
    {{ -0.7071067811865475244008444, -0.7071067811865475244008444, 0.7071067811865475244008444, 0.5000000000000000000000000 }, 
     {  0.7071067811865475244008444,  0.7071067811865475244008444, 0.7071067811865475244008444, 0.5000000000000000000000000 }
    }
  };
  disk_pars[3] =  { 1.0471975511965977461542145,
    {{ -0.8164965809277260327324280, -0.8660254037844386467637232, 0.5000000000000000000000000, 0.3750000000000000000000000 },
     {  0.0000000000000000000000000,  0.0000000000000000000000000, 1.0000000000000000000000000, 0.2500000000000000000000000 },
     {  0.8164965809277260327324280,  0.8660254037844386467637232, 0.5000000000000000000000000, 0.3750000000000000000000000 },
    }
  };
  disk_pars[4] =  { 0.7853981633974483096156608,
    {{ -0.8880738339771152621607646, -0.9238795325112867561281832, 0.3826834323650897717284600, 0.2500000000000000000000000 },
     { -0.4597008433809830609776340, -0.3826834323650897717284600, 0.9238795325112867561281832, 0.2500000000000000000000000 },
     {  0.4597008433809830609776340,  0.3826834323650897717284600, 0.9238795325112867561281832, 0.2500000000000000000000000 },
     {  0.8880738339771152621607646,  0.9238795325112867561281832, 0.3826834323650897717284600, 0.2500000000000000000000000 },
    }
  };
  disk_pars[5] =  { 0.6283185307179586476925287,
    {{ -0.9192110607898045793726291, -0.9510565162951535721164393, 0.3090169943749474241022934, 0.1882015313502336375250377 },
     { -0.5958615826865180525340234, -0.5877852522924731291687060, 0.8090169943749474241022934, 0.2562429130942108069194067 },
     {  0.0000000000000000000000000,  0.0000000000000000000000000, 1.0000000000000000000000000, 0.1111111111111111111111111 },
     {  0.5958615826865180525340234,  0.5877852522924731291687060, 0.8090169943749474241022934, 0.2562429130942108069194067 },
     {  0.9192110607898045793726291,  0.9510565162951535721164393, 0.3090169943749474241022934, 0.1882015313502336375250377 }
    }
  };
  disk_pars[6] =  { 0.5235987755982988730771072,
    {{ -0.9419651451198933233901941, -0.9659258262890682867497432, 0.2588190451025207623488988, 0.1388888888888888888888889 },
     { -0.7071067811865475244008444, -0.7071067811865475244008444, 0.7071067811865475244008444, 0.2222222222222222222222222 },
     { -0.3357106870197288066698994, -0.2588190451025207623488988, 0.9659258262890682867497432, 0.1388888888888888888888889 },
     {  0.3357106870197288066698994,  0.2588190451025207623488988, 0.9659258262890682867497432, 0.1388888888888888888888889 },
     {  0.7071067811865475244008444,  0.7071067811865475244008444, 0.7071067811865475244008444, 0.2222222222222222222222222 },
     {  0.9419651451198933233901941,  0.9659258262890682867497432, 0.2588190451025207623488988, 0.1388888888888888888888889 }
    }
  };
  disk_pars[7] =  { 0.4487989505128276054946633,
    {{ -0.9546790248493448767148503, -0.9749279121818236070181317, 0.2225209339563144042889026, 0.1102311055883841876377392 },
     { -0.7684615381131740734708478, -0.7818314824680298087084445, 0.6234898018587335305250049, 0.1940967344215859403901162 },
     { -0.4608042298407784190147371, -0.4338837391175581204757683, 0.9009688679024191262361023, 0.1644221599900298719721446 },
     {  0.0000000000000000000000000,  0.0000000000000000000000000, 1.0000000000000000000000000, 0.0625000000000000000000000 },
     {  0.4608042298407784190147371,  0.4338837391175581204757683, 0.9009688679024191262361023, 0.1644221599900298719721446 },
     {  0.7684615381131740734708478,  0.7818314824680298087084445, 0.6234898018587335305250049, 0.1940967344215859403901162 },
     {  0.9546790248493448767148503,  0.9749279121818236070181317, 0.2225209339563144042889026, 0.1102311055883841876377392 }
    }
  };
  disk_pars[8] =  { 0.3926990816987241548078304,
    {{ -0.9646596061808674528345806, -0.9807852804032304491261822, 0.1950903220161282678482849, 0.0869637112843634643432660 },
     { -0.8185294874300058668603761, -0.8314696123025452370787884, 0.5555702330196022247428308, 0.1630362887156365356567340 },
     { -0.5744645143153507855310459, -0.5555702330196022247428308, 0.8314696123025452370787884, 0.1630362887156365356567340 },
     { -0.2634992299855422962484895, -0.1950903220161282678482849, 0.9807852804032304491261822, 0.0869637112843634643432660 },
     {  0.2634992299855422962484895,  0.1950903220161282678482849, 0.9807852804032304491261822, 0.0869637112843634643432660 },
     {  0.5744645143153507855310459,  0.5555702330196022247428308, 0.8314696123025452370787884, 0.1630362887156365356567340 },
     {  0.8185294874300058668603761,  0.8314696123025452370787884, 0.5555702330196022247428308, 0.1630362887156365356567340 },
     {  0.9646596061808674528345806,  0.9807852804032304491261822, 0.1950903220161282678482849, 0.0869637112843634643432660 }
    }
  };
  disk_pars[9] =  { 0.3490658503988659153847382,
    {{ -0.9710282199223060261836893, -0.9848077530122080593667430, 0.1736481776669303488517166, 0.0718567803956129706617061 },
     { -0.8503863747508400503582112, -0.8660254037844386467637232, 0.5000000000000000000000000, 0.1406780075747310300960863 },
     { -0.6452980455813291706201889, -0.6427876096865393263226434, 0.7660444431189780352023927, 0.1559132614878706270409275 },
     { -0.3738447061866471744516959, -0.3420201433256687330440996, 0.9396926207859083840541093, 0.1115519505417853722012801 },
     {  0.0000000000000000000000000,  0.0000000000000000000000000, 1.0000000000000000000000000, 0.0400000000000000000000000 },
     {  0.3738447061866471744516959,  0.3420201433256687330440996, 0.9396926207859083840541093, 0.1115519505417853722012801 },
     {  0.6452980455813291706201889,  0.6427876096865393263226434, 0.7660444431189780352023927, 0.1559132614878706270409275 },
     {  0.8503863747508400503582112,  0.8660254037844386467637232, 0.5000000000000000000000000, 0.1406780075747310300960863 },
     {  0.9710282199223060261836893,  0.9848077530122080593667430, 0.1736481776669303488517166, 0.0718567803956129706617061 }
    }
  };
  disk_pars[10] =  { 0.3141592653589793238462643,
    {{ -0.9762632447087885713212574, -0.9876883405951377261900402, 0.1564344650402308690101053, 0.0592317212640472718785660 },
     { -0.8770602345636481685478274, -0.8910065241883678623597096, 0.4539904997395467915604084, 0.1196571676248416170103229 },
     { -0.7071067811865475244008444, -0.7071067811865475244008444, 0.7071067811865475244008444, 0.1422222222222222222222222 },
     { -0.4803804169063914437972190, -0.4539904997395467915604084, 0.8910065241883678623597096, 0.1196571676248416170103229 },
     { -0.2165873427295972057980989, -0.1564344650402308690101053, 0.9876883405951377261900402, 0.0592317212640472718785660 },
     {  0.2165873427295972057980989,  0.1564344650402308690101053, 0.9876883405951377261900402, 0.0592317212640472718785660 },
     {  0.4803804169063914437972190,  0.4539904997395467915604084, 0.8910065241883678623597096, 0.1196571676248416170103229 },
     {  0.7071067811865475244008444,  0.7071067811865475244008444, 0.7071067811865475244008444, 0.1422222222222222222222222 },
     {  0.8770602345636481685478274,  0.8910065241883678623597096, 0.4539904997395467915604084, 0.1196571676248416170103229 },
     {  0.9762632447087885713212574,  0.9876883405951377261900402, 0.1564344650402308690101053, 0.0592317212640472718785660 }
    }
  };
  disk_pars[11] =  { 0.2855993321445266580420585,
    {{ -0.9798929242261785296900647, -0.9898214418809327323760920, 0.1423148382732851404437927, 0.0503970963133702100523002 },
     { -0.8955370355972955669596880, -0.9096319953545183714117154, 0.4154150130018864255292741, 0.1042253335779769347398516 },
     { -0.7496833930084178248529754, -0.7557495743542582837740358, 0.6548607339452850640569251, 0.1302316957973937456425574 },
     { -0.5518475574344457542797839, -0.5406408174555975821076360, 0.8412535328311811688618116, 0.1213467971172424790399570 },
     { -0.3139029878781443299110139, -0.2817325568414296977114179, 0.9594929736144973898903681, 0.0799101883051277416364450 },
     {  0.0000000000000000000000000,  0.0000000000000000000000000, 1.0000000000000000000000000, 0.0277777777777777777777778 },
     {  0.3139029878781443299110139,  0.2817325568414296977114179, 0.9594929736144973898903681, 0.0799101883051277416364450 },
     {  0.5518475574344457542797839,  0.5406408174555975821076360, 0.8412535328311811688618116, 0.1213467971172424790399570 },
     {  0.7496833930084178248529754,  0.7557495743542582837740358, 0.6548607339452850640569251, 0.1302316957973937456425574 },
     {  0.8955370355972955669596880,  0.9096319953545183714117154, 0.4154150130018864255292741, 0.1042253335779769347398516 },
     {  0.9798929242261785296900647,  0.9898214418809327323760920, 0.1423148382732851404437927, 0.0503970963133702100523002 }
    }
  };
  disk_pars[12] =  { 0.2617993877991494365385536,
    {{ -0.9829724091252897490485174, -0.9914448613738104111445575, 0.1305261922200515915484062, 0.0428311230947925862600740 },
     { -0.9113751660173390180078701, -0.9238795325112867561281832, 0.3826834323650897717284600, 0.0901903932620346518924584 },
     { -0.7869622564275865284525289, -0.7933533402912351645797770, 0.6087614290087206394160975, 0.1169784836431727618474676 },
     { -0.6170011401597257548496886, -0.6087614290087206394160975, 0.7933533402912351645797770, 0.1169784836431727618474676 },
     { -0.4115766110542091326058875, -0.3826834323650897717284600, 0.9238795325112867561281832, 0.0901903932620346518924584 },
     { -0.1837532119404283667441428, -0.1305261922200515915484062, 0.9914448613738104111445575, 0.0428311230947925862600740 },
     {  0.1837532119404283667441428,  0.1305261922200515915484062, 0.9914448613738104111445575, 0.0428311230947925862600740 },
     {  0.4115766110542091326058875,  0.3826834323650897717284600, 0.9238795325112867561281832, 0.0901903932620346518924584 },
     {  0.6170011401597257548496886,  0.6087614290087206394160975, 0.7933533402912351645797770, 0.1169784836431727618474676 },
     {  0.7869622564275865284525289,  0.7933533402912351645797770, 0.6087614290087206394160975, 0.1169784836431727618474676 },
     {  0.9113751660173390180078701,  0.9238795325112867561281832, 0.3826834323650897717284600, 0.0901903932620346518924584 },
     {  0.9829724091252897490485174,  0.9914448613738104111445575, 0.1305261922200515915484062, 0.0428311230947925862600740 }
    }
  };
}

double f1(double x, double y)
{
  return x*x*y*y;
}

double f2(double x, double y)
{
  return x*x*y*y*y*y;
}

// Compute the n^2 points and weights for a Gauss quadrature product approximation to
// the integral on the disk centered at the origin with radius R which is exact
// for polynomial degree 2n-1.
void set_points_and_weights(vector<double>& x, vector<double>& y, vector<double>& weight, int n, double R=1.0)
{
  DiskParam dp = disk_pars[n];
  for (auto& p1 : dp.pts) {
    for (auto& p2 : dp.pts) {
      x.push_back(R * p1.r * p2.q);
      y.push_back(R * p1.r * p2.t);
      weight.push_back(dp.B * p1.A * R * R);
    }
  }
}

// Compute the n^2 points and weights for a Gauss quadrature product approximation to
// the integral on the disk centered at the origin with radius R which is exact
// for polynomial degree 2n-1.
void set_points_and_weights1(vector<double>& x, vector<double>& y, vector<double>& weight, int n, double R=1.0)
{
  DiskParam dp = disk_pars[n];
  for (auto& p1 : dp.pts) {
    if (p1.r == 0) {
      x.push_back(0);
      y.push_back(0);
      weight.push_back(dp.B * p1.A * R * R * n);
    }
    else {
      for (auto& p2 : dp.pts) {
        x.push_back(R * p1.r * p2.q);
        y.push_back(R * p1.r * p2.t);
        weight.push_back(dp.B * p1.A * R * R);
      }
    }
  }
}

// Compute a Gauss quadrature product approximation to the integral
// of the given function f, exact for polynomial degree 2n-1, on the 
// disk centered at the origin with radius R
double gauss_int(double (*f)(double, double), int n, double R=1.0)
{
  DiskParam dp = disk_pars[n];
  double result = 0.0;
  for (auto& p1 : dp.pts) {
    for (auto& p2 : dp.pts) {
      auto x = R * p1.r * p2.q;
      auto y = R * p1.r * p2.t;
      result += p1.A * f(x,y);
    }
  }
  return result*R*R*dp.B;
}

// Compute a Gauss quadrature product approximation to the integral
// of the given function f, exact for polynomial degree 2n-1, on the 
// disk centered at the origin with radius R
double gauss_int1(double (*f)(double, double), int n, double R=1.0)
{
  DiskParam dp = disk_pars[n];
  double result = 0.0;
  for (auto& p1 : dp.pts) {
    if (p1.r == 0)
      result += p1.A * n * f(0,0);
    else {
      for (auto& p2 : dp.pts) {
        auto x = R * p1.r * p2.q;
        auto y = R * p1.r * p2.t;
        result += p1.A * f(x,y);
      }
    }
  }
  return result*R*R*dp.B;
}



int main()
{
  init_disk_pars();
  cout.precision(15);
  for (auto pt: disk_pars[12].pts)
    cout << "pt.r = " << pt.r << ", pt.q = " << pt.q << endl;

  cout << "integral of x^2 y^2 on the unit circle (exact) = " << gauss_int(f1, 3) << endl;
  cout << "integral of x^2 y^4 on circle r=1.25e-5  (exact) = " << gauss_int(f2, 6, 1.25e-5) << endl;
  cout << "improved version" << endl;
  cout << "integral of x^2 y^2 on the unit circle (exact) = " << gauss_int1(f1, 3) << endl;
  cout << "integral of x^2 y^4 on circle r=1.25e-5  (exact) = " << gauss_int1(f2, 6, 1.25e-5) << endl;
  vector<double> x;
  vector<double> y;
  vector<double> weight;
  set_points_and_weights(x,y,weight,11);
  int sz = x.size();
  cout << "size is " << sz << endl;
  cout << "x   y   weight" << endl;
  for (int i=0; i!=sz; ++i)
    cout << x[i] << " " << y[i] << " " << weight[i] << endl;

  cout << "improved version" << endl;
  x.clear();
  y.clear();
  weight.clear();
  set_points_and_weights1(x,y,weight,11);
  sz = x.size();
  cout << "size is " << sz << endl;
  cout << "x   y   weight" << endl;
  for (int i=0; i!=sz; ++i)
    cout << x[i] << " " << y[i] << " " << weight[i] << endl;

}
